diff --git a/npm-publish.js b/npm-publish.js
index 6f5973b44c435b0bebb3ea6f8c62a6662cf6a33c..8ef6d28d81e6a18e93c0bb66a2e53c549c7ff314 100644
--- a/npm-publish.js
+++ b/npm-publish.js
@@ -68,7 +68,10 @@ function npmPublish(pkg, tarFilePath, options = {}, otpCache) {
         manifestLocation = path.join(pkg.contents, "package.json");
       }
 
-      return Promise.all([fs.readFile(tarFilePath), readJSONAsync(manifestLocation)]);
+      return Promise.all([
+        fs.readFile(tarFilePath),
+        readJSONAsync(manifestLocation),
+      ]);
     });
     chain = chain.then(([tarData, manifest]) => {
       // non-default tag needs to override publishConfig.tag,
@@ -88,7 +91,15 @@ function npmPublish(pkg, tarFilePath, options = {}, otpCache) {
         Object.assign(opts, publishConfigToOpts(manifest.publishConfig));
       }
 
-      return otplease((innerOpts) => publish(manifest, tarData, innerOpts), opts, otpCache).catch((err) => {
+      stripWorkspaceProtocolFromDeps(manifest.dependencies);
+      stripWorkspaceProtocolFromDeps(manifest.peerDependencies);
+      stripWorkspaceProtocolFromDeps(manifest.devDependencies);
+
+      return otplease(
+        (innerOpts) => publish(manifest, tarData, innerOpts),
+        opts,
+        otpCache
+      ).catch((err) => {
         opts.log.silly("", err);
         opts.log.error(err.code, (err.body && err.body.error) || err.message);
 
@@ -110,6 +121,21 @@ function npmPublish(pkg, tarFilePath, options = {}, otpCache) {
   return chain;
 }
 
+function stripWorkspaceProtocolFromDeps(deps) {
+  if (!deps) {
+    return;
+  }
+
+  for (const [name, version] of Object.entries(deps)) {
+    if (version.startsWith("workspace:")) {
+      const packagePath = version.slice(10);
+      const resolvedVersion = require(`${process.cwd()}/${packagePath}/package.json`)
+        .version;
+      deps[name] = `^${resolvedVersion}`;
+    }
+  }
+}
+
 /**
  * @typedef {object} PackagePublishConfig
  * @property {'public' | 'restricted'} [access]
